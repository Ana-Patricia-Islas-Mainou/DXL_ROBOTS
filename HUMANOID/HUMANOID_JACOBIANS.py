import numpy as np

from ROBOTS.ROBOT_P2_CONFIG import ROBOT_NAME

#---------- ADD ANOTHER ROBOT INSIDE THIS IF
if ROBOT_NAME == "BOGO3":
    from ROBOTS.BOGO3.BOGO3_SPECS import *
if ROBOT_NAME == "BOGO4":
    from ROBOTS.BOGO4.BOGO4_SPECS import *

# JACOBIANA PIERNA DERECHA
def rightLeg_Jacobian(qJ):
    L1 = L[0] 
    L2 = L[1] 
    L3 = L[2] 
    L4 = L[3]

    q7 = qJ[0]
    q9 = qJ[1]
    q11 = qJ[2]
    q13 = qJ[3] 
    q15 = qJ[4]
    q17 = qJ[5] 

    c7 = np.cos(q7)
    s7 = np.sin(q7)
    c9 = np.cos(q9)
    s9 = np.sin(q9)
    c11 = np.cos(q11)
    s11 = np.sin(q11)
    c13 = np.cos(q13)
    s13 = np.sin(q13)
    c15 = np.cos(q15)
    s15 = np.sin(q15)
    c17 = np.cos(q17)
    s17 = np.sin(q17)

    c11_13 = np.cos(q11 + q13)
    s11_13 = np.sin(q11 + q13)
    c11_13_15 = np.cos(q11 + q13 - q15)
    s11_13_15 = np.sin(q11 + q13 - q15)

    Jt_RLeg = np.zeros((6,6))

    # renglon 1
    Jt_RLeg[0,0] = -s7*(L4*s11_13 + L3*s11) - c7*s9*(L4*c11_13 + L3*c11)
    Jt_RLeg[0,1] = -c9*s7*(L4*c11_13 + L3*c11)
    Jt_RLeg[0,2] = c7*(L4*c11_13 + L3*c11) + s7*s9*(L4*s11_13 + L3*s11)
    Jt_RLeg[0,3] = L4*c11_13*c7 + L4*s11_13*s7*s9
    Jt_RLeg[0,4] = 0
    Jt_RLeg[0,5] = 0

    # renglon 2
    Jt_RLeg[1,0] = s7*s9*(L4*c11_13 + L3*c11) - c7*(L4*s11_13 + L3*s11)
    Jt_RLeg[1,1] = -c7*c9*(L4*c11_13 + L3*c11)
    Jt_RLeg[1,2] = c7*s9*(L4*s11_13 + L3*s11) - s7*(L4*c11_13 + L3*c11)
    Jt_RLeg[1,3] = L4*s11_13*c7*s9 - L4*c11_13*s7
    Jt_RLeg[1,4] = 0
    Jt_RLeg[1,5] = 0

    # renglon 3
    Jt_RLeg[2,0] = 0
    Jt_RLeg[2,1] = s9*(L4*c11_13 + L3*c11)
    Jt_RLeg[2,2] = c9*(L4*s11_13 + L3*s11)
    Jt_RLeg[2,3] = L4*s11_13*c9
    Jt_RLeg[2,4] = 0
    Jt_RLeg[2,5] = 0

    # renglon 4
    Jt_RLeg[3,0] = 0
    Jt_RLeg[3,1] = (c9*s17 - c11_13_15*c17*s9)*(c17*(s11_13_15*s7 + c11_13_15*c7*s9) - c7*c9*s17) - (c9*c17 + c11_13_15*s9*s17)*(s17*(s11_13_15*s7 + c11_13_15*c7*s9) + c7*c9*c17) + s11_13_15*s9*(c11_13_15*s7 - s11_13_15*c7*s9)
    Jt_RLeg[3,2] = -c9*s7
    Jt_RLeg[3,3] = -c9*s7
    Jt_RLeg[3,4] = c9*s7
    Jt_RLeg[3,5] = c11_13_15*c7 + s11_13_15*s7*s9

    # renglon 5
    Jt_RLeg[4,0] = (s9*s17 + c11_13_15*c9*c17)*(c17*(s11_13_15*s7 + c11_13_15*c7*s9) - c7*c9*s17) - (c17*s9 - c11_13_15*c9*s17)*(s17*(s11_13_15*s7 + c11_13_15*c7*s9) + c7*c9*c17) - s11_13_15*c9*(c11_13_15*s7 - s11_13_15*c7*s9)
    Jt_RLeg[4,1] = s7
    Jt_RLeg[4,2] = s17*(c17*s9 - c11_13_15*c9*s17)*(c11_13_15*c7 + s11_13_15*s7*s9) - c17*(s9*s17 + c11_13_15*c9*c17)*(c11_13_15*c7 + s11_13_15*s7*s9) - s11_13_15*c9*(s11_13_15*c7 - c11_13_15*s7*s9)
    Jt_RLeg[4,3] = s17*(c17*s9 - c11_13_15*c9*s17)*(c11_13_15*c7 + s11_13_15*s7*s9) - c17*(s9*s17 + c11_13_15*c9*c17)*(c11_13_15*c7 + s11_13_15*s7*s9) - s11_13_15*c9*(s11_13_15*c7 - c11_13_15*s7*s9)
    Jt_RLeg[4,4] = c7*c9
    Jt_RLeg[4,5] = s11_13_15*c7*s9 - c11_13_15*s7

    # renglon 6
    Jt_RLeg[5,0] = - pow((c11_13_15*c7 + s11_13_15*s7*s9),2) - pow((c17*(s11_13_15*c7 - c11_13_15*s7*s9) + c9*s7*s17),2) - pow((s17*(s11_13_15*c7 - c11_13_15*s7*s9) - c9*c17*s7),2)
    Jt_RLeg[5,1] = (s17*(s11_13_15*c7 - c11_13_15*s7*s9) - c9*c17*s7)*(c7*c17*s9 - c11_13_15*c7*c9*s17) - (c17*(s11_13_15*c7 - c11_13_15*s7*s9) + c9*s7*s17)*(c7*s9*s17 + c11_13_15*c7*c9*c17) + s11_13_15*c7*c9*(c11_13_15*c7 + s11_13_15*s7*s9)
    Jt_RLeg[5,2] = (c11_13_15*c7 + s11_13_15*s7*s9)*(s11_13_15*s7 + c11_13_15*c7*s9) - c17*(c17*(s11_13_15*c7 - c11_13_15*s7*s9) + c9*s7*s17)*(c11_13_15*s7 - s11_13_15*c7*s9) - s17*(s17*(s11_13_15*c7 - c11_13_15*s7*s9) - c9*c17*s7)*(c11_13_15*s7 - s11_13_15*c7*s9)
    Jt_RLeg[5,3] = (c11_13_15*c7 + s11_13_15*s7*s9)*(s11_13_15*s7 + c11_13_15*c7*s9) - c17*(c17*(s11_13_15*c7 - c11_13_15*s7*s9) + c9*s7*s17)*(c11_13_15*s7 - s11_13_15*c7*s9) - s17*(s17*(s11_13_15*c7 - c11_13_15*s7*s9) - c9*c17*s7)*(c11_13_15*s7 - s11_13_15*c7*s9)
    Jt_RLeg[5,4] = c17*(c17*(s11_13_15*c7 - c11_13_15*s7*s9) + c9*s7*s17)*(c11_13_15*s7 - s11_13_15*c7*s9) - (c11_13_15*c7 + s11_13_15*s7*s9)*(s11_13_15*s7 + c11_13_15*c7*s9) + s17*(s17*(s11_13_15*c7 - c11_13_15*s7*s9) - c9*c17*s7)*(c11_13_15*s7 - s11_13_15*c7*s9)
    Jt_RLeg[5,5] = s11_13_15*c9

    return Jt_RLeg

def leftLeg_Jacobian(qJ):
    L1 = L[0] 
    L2 = L[1] 
    L3 = L[2] 
    L4 = L[3]

    q8 = qJ[0]
    q10 = qJ[1]
    q12 = qJ[2]
    q14 = qJ[3]
    q16 = qJ[4]
    q18 = qJ[5]

    c8 = cos(q8)
    s8 = sin(q8)
    c10 = cos(q10)
    s10 = sin(q10)
    c12 = cos(q12)
    s12 = sin(q12)
    c14 = cos(q14)
    s14 = sin(q14)
    c16 = cos(q16)
    s16 = sin(q16)
    c18 = cos(q18)
    s18 = sin(q18)

    c12_14 = cos(q12 + q14)
    s12_14 = sin(q12 + q14)
    c12_14_16 = cos(q12 + q14 - q16)
    s12_14_16 = sin(q12 + q14 - q16)

    Jt_LLeg = np.zeros((6,6))

    # renglon 1
    Jt_LLeg[0,0] = s8*(L4*s12_14 + L3*s12) - c8*s10*(L4*c12_14 + L3*c12)
    Jt_LLeg[0,1] = -c10*s8*(L4*c12_14 + L3*c12)
    Jt_LLeg[0,2] = s8*s10*(L4*s12_14 + L3*s12) - c8*(L4*c12_14 + L3*c12)
    Jt_LLeg[0,3] = L4*s12_14*s8*s10 - L4*c12_14*c8
    Jt_LLeg[0,4] = 0
    Jt_LLeg[0,5] = 0

    # renglon 2
    Jt_LLeg[1,0] = c8*(L4*s12_14 + L3*s12) + s8*s10*(L4*c12_14 + L3*c12)
    Jt_LLeg[1,1] = -c8*c10*(L4*c12_14 + L3*c12)
    Jt_LLeg[1,2] = s8*(L4*c12_14 + L3*c12) + c8*s10*(L4*s12_14 + L3*s12)
    Jt_LLeg[1,3] = L4*c12_14*s8 + L4*s12_14*c8*s10
    Jt_LLeg[1,4] = 0
    Jt_LLeg[1,5] = 0

    # renglon 3
    Jt_LLeg[2,0] = 0
    Jt_LLeg[2,1] = s10*(L4*c12_14 + L3*c12)
    Jt_LLeg[2,2] = c10*(L4*s12_14 + L3*s12)
    Jt_LLeg[2,3] = L4*s12_14*c10
    Jt_LLeg[2,4] = 0
    Jt_LLeg[2,5] = 0

    # renglon 4
    Jt_LLeg[3,0] = 0
    Jt_LLeg[3,1] = (c10*c18 + c12_14_16*s10*s18)*(s18*(s12_14_16*s8 - c12_14_16*c8*s10) - c8*c10*c18) - (c10*s18 - c12_14_16*c18*s10)*(c18*(s12_14_16*s8 - c12_14_16*c8*s10) + c8*c10*s18) - s12_14_16*s10*(c12_14_16*s8 + s12_14_16*c8*s10)
    Jt_LLeg[3,2] = c10*s8
    Jt_LLeg[3,3] = c10*s8
    Jt_LLeg[3,4] = -c10*s8
    Jt_LLeg[3,5] = c12_14_16*c8 - s12_14_16*s8*s10

    # renglon 5
    Jt_LLeg[4,0] = (c18*s10 - c12_14_16*c10*s18)*(s18*(s12_14_16*s8 - c12_14_16*c8*s10) - c8*c10*c18) - (s10*s18 + c12_14_16*c10*c18)*(c18*(s12_14_16*s8 - c12_14_16*c8*s10) + c8*c10*s18) + s12_14_16*c10*(c12_14_16*s8 + s12_14_16*c8*s10)
    Jt_LLeg[4,1] = s8
    Jt_LLeg[4,2] = c8*c10
    Jt_LLeg[4,3] = c8*c10
    Jt_LLeg[4,4] = -c8*c10
    Jt_LLeg[4,5] = -c12_14_16*s8 - s12_14_16*c8*s10

    # renglon 6
    Jt_LLeg[5,0] = -pow((c12_14_16*c8 - s12_14_16*s8*s10),2) - pow((s18*(s12_14_16*c8 + c12_14_16*s8*s10) + c10*c18*s8),2) - pow((c18*(s12_14_16*c8 + c12_14_16*s8*s10) - c10*s8*s18),2)
    Jt_LLeg[5,1] = (c18*(s12_14_16*c8 + c12_14_16*s8*s10) - c10*s8*s18)*(c8*s10*s18 + c12_14_16*c8*c10*c18) - (s18*(s12_14_16*c8 + c12_14_16*s8*s10) + c10*c18*s8)*(c8*c18*s10 - c12_14_16*c8*c10*s18) - s12_14_16*c8*c10*(c12_14_16*c8 - s12_14_16*s8*s10)
    Jt_LLeg[5,2] = (c12_14_16*c8 - s12_14_16*s8*s10)*(s12_14_16*s8 - c12_14_16*c8*s10) - c18*(c18*(s12_14_16*c8 + c12_14_16*s8*s10) - c10*s8*s18)*(c12_14_16*s8 + s12_14_16*c8*s10) - s18*(s18*(s12_14_16*c8 + c12_14_16*s8*s10) + c10*c18*s8)*(c12_14_16*s8 + s12_14_16*c8*s10)
    Jt_LLeg[5,3] = (c12_14_16*c8 - s12_14_16*s8*s10)*(s12_14_16*s8 - c12_14_16*c8*s10) - c18*(c18*(s12_14_16*c8 + c12_14_16*s8*s10) - c10*s8*s18)*(c12_14_16*s8 + s12_14_16*c8*s10) - s18*(s18*(s12_14_16*c8 + c12_14_16*s8*s10) + c10*c18*s8)*(c12_14_16*s8 + s12_14_16*c8*s10)
    Jt_LLeg[5,4] = c18*(c18*(s12_14_16*c8 + c12_14_16*s8*s10) - c10*s8*s18)*(c12_14_16*s8 + s12_14_16*c8*s10) - (c12_14_16*c8 - s12_14_16*s8*s10)*(s12_14_16*s8 - c12_14_16*c8*s10) + s18*(s18*(s12_14_16*c8 + c12_14_16*s8*s10) + c10*c18*s8)*(c12_14_16*s8 + s12_14_16*c8*s10)
    Jt_LLeg[5,5] = -s12_14_16*c10

    return Jt_LLeg
